// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ping.proto

/*
Package test is a generated protocol buffer package.

It is generated from these files:
	ping.proto

It has these top-level messages:
	PingReq
	PingResp
*/
package test

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PingReq struct {
	Msg string `protobuf:"bytes,1,opt,name=msg" json:"msg,omitempty"`
}

func (m *PingReq) Reset()                    { *m = PingReq{} }
func (m *PingReq) String() string            { return proto.CompactTextString(m) }
func (*PingReq) ProtoMessage()               {}
func (*PingReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PingReq) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type PingResp struct {
	Msg string `protobuf:"bytes,1,opt,name=msg" json:"msg,omitempty"`
}

func (m *PingResp) Reset()                    { *m = PingResp{} }
func (m *PingResp) String() string            { return proto.CompactTextString(m) }
func (*PingResp) ProtoMessage()               {}
func (*PingResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PingResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*PingReq)(nil), "test.PingReq")
	proto.RegisterType((*PingResp)(nil), "test.PingResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PingPong service

type PingPongClient interface {
	Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingResp, error)
	Panic(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingResp, error)
}

type pingPongClient struct {
	cc *grpc.ClientConn
}

func NewPingPongClient(cc *grpc.ClientConn) PingPongClient {
	return &pingPongClient{cc}
}

func (c *pingPongClient) Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingResp, error) {
	out := new(PingResp)
	err := grpc.Invoke(ctx, "/test.PingPong/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pingPongClient) Panic(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingResp, error) {
	out := new(PingResp)
	err := grpc.Invoke(ctx, "/test.PingPong/Panic", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PingPong service

type PingPongServer interface {
	Ping(context.Context, *PingReq) (*PingResp, error)
	Panic(context.Context, *PingReq) (*PingResp, error)
}

func RegisterPingPongServer(s *grpc.Server, srv PingPongServer) {
	s.RegisterService(&_PingPong_serviceDesc, srv)
}

func _PingPong_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PingPongServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.PingPong/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PingPongServer).Ping(ctx, req.(*PingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PingPong_Panic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PingPongServer).Panic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.PingPong/Panic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PingPongServer).Panic(ctx, req.(*PingReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _PingPong_serviceDesc = grpc.ServiceDesc{
	ServiceName: "test.PingPong",
	HandlerType: (*PingPongServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _PingPong_Ping_Handler,
		},
		{
			MethodName: "Panic",
			Handler:    _PingPong_Panic_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ping.proto",
}

func init() { proto.RegisterFile("ping.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 123 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0xc8, 0xcc, 0x4b,
	0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x29, 0x49, 0x2d, 0x2e, 0x51, 0x92, 0xe6, 0x62,
	0x0f, 0xc8, 0xcc, 0x4b, 0x0f, 0x4a, 0x2d, 0x14, 0x12, 0xe0, 0x62, 0xce, 0x2d, 0x4e, 0x97, 0x60,
	0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0x31, 0x95, 0x64, 0xb8, 0x38, 0x20, 0x92, 0xc5, 0x05, 0x98,
	0xb2, 0x46, 0x91, 0x10, 0xd9, 0x80, 0xfc, 0xbc, 0x74, 0x21, 0x55, 0x2e, 0x16, 0x10, 0x5b, 0x88,
	0x57, 0x0f, 0x64, 0xaa, 0x1e, 0xd4, 0x48, 0x29, 0x3e, 0x64, 0x6e, 0x71, 0x81, 0x90, 0x1a, 0x17,
	0x6b, 0x40, 0x62, 0x5e, 0x66, 0x32, 0x01, 0x75, 0x49, 0x6c, 0x60, 0x27, 0x1a, 0x03, 0x02, 0x00,
	0x00, 0xff, 0xff, 0x87, 0x7a, 0x81, 0x19, 0xb0, 0x00, 0x00, 0x00,
}
